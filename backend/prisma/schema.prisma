// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstname String
  lastname  String
  pseudo    String @unique //login
  username  String @unique 
  picture   String

  wins      Int @default(0)
  losses    Int @default(0)
  rank      Int @default(0)
  level     Int @default(0)

  //2FA
  FA2       Boolean @default(false)
  FA2lock   Boolean @default(false)
  FA2secret String?

  // Achievements
  FirstWin Boolean @default(false) // 1er win
  WinStreak Boolean @default(false) // 3 wins d'affilé
  ImTheBoss Boolean @default(false) // Win vs un des 5 createurs
  TheDarkSide Boolean @default(false) // Se log en tant que membre du bocal
  ImCurious Boolean @default(false) // Aller voir le github d'un des createurs

  Match_historiques Match[] @relation("Match_User")

  // pitié monsieur donne un autre nom a cette variable, je m'en sers deja dans le front du chat et je fais des gros user =  donc ca va ecraser mon status du front
  // onLine c'est bien non?
  // pitié j'ai 1200 lignes de code a checker sinon
  connected    Int @default(0) // 0 = offline, 1 = online, 2 = in game
  win_streak   Int @default(0)


  userBlocks        Block[] @relation("user")
  blockedUserBlocks Block[] @relation("blocked_users")

  userFriends       Friend[] @relation("user")
  friendUserFriends Friend[] @relation("friend_users")

  // matchesWon MatchHistory[] @relation("winner")
  // matchesLost MatchHistory[] @relation("loser")
  // scoreWinner Int @relation("winner")
  // scoreLoser Int @relation("loser")

  // mettres toutes ces variables dans la table intermediaire ChatRoomMembers? A voir JSP
  memberOf ChatRoom[] @relation("ChatRoomMembers")
  mutedOf  ChatRoom[] @relation("ChatRoomMuted")
  bannedOf ChatRoom[] @relation("ChatRoomBanned")
  adminOf  ChatRoom[] @relation("ChatRoomAdmin")
  ownerOf  ChatRoom[] @relation("ChatRoomOwned")

  ownerOneOf DirectMessageRoom[] @relation("ownerOne")
  ownerTwoOf DirectMessageRoom[] @relation("ownerTwo")


  @@map("user") // indique que le nom de la table est "user" plutôt que "User"
}

model Block {

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation("user", fields: [user_id], references: [id])
  user_id   Int

  blocked   User    @relation("blocked_users", fields: [blocked_id], references: [id])
  blocked_id Int

  @@unique([user_id, blocked_id])
  @@map("block")
}

model Friend {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation("user", fields: [user_id], references: [id])
  user_id   Int

  friend    User    @relation("friend_users", fields: [friend_id], references: [id])
  friend_id Int

  @@unique([user_id, friend_id])
  @@map("friend")
}

model ChatRoom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  password String
  private  Boolean
  ownerId  Int
  owner    User    @relation("ChatRoomOwned", fields: [ownerId], references: [id])

  members  User[]    @relation("ChatRoomMembers")
  admin    User[]    @relation("ChatRoomAdmin")
  muted    User[]    @relation("ChatRoomMuted")
  banned   User[]    @relation("ChatRoomBanned")
  messages Message[] @relation("ChatRoomMessages")

  @@map("chat_room")
}

model DirectMessageRoom {
  id  Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerOneId  Int
  ownerTwoId  Int

  ownerOne  User @relation("ownerOne", fields: [ownerOneId], references: [id])
  ownerTwo  User @relation("ownerTwo", fields: [ownerTwoId], references: [id])

  messages DirectMessage[] @relation("directMessages")

  @@map("direct_message")
}

// table intermediaire, permettra de checker qu'un user est dans une room qu'une seule fois 
// (qu'il ne se co pas 50 fois a la meme room, ca peut etre chiant)
model ChatRoomMembers {
  chatRoomId Int
  userId     Int
  createdAt  DateTime @default(now())

  @@id([chatRoomId, userId])
  @@map("chat_room_members")
}

model Message {
  id        Int      @id @default(autoincrement()) //mandatory but useless (on va pas modifier ou supp des messages ds ce projet, c'est pas discord ici)
  createdAt DateTime @default(now())

  content      String
  senderId     Int
  senderPseudo String
  chatRoomId   Int
  chatRoom     ChatRoom @relation("ChatRoomMessages", fields: [chatRoomId], references: [id])

  @@map("message")
}

model DirectMessage {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  content String
  senderId Int
  senderPseudo String
  directMessageRoomId Int
  directMessageRoom DirectMessageRoom @relation("directMessages", fields: [directMessageRoomId], references: [id])
}


model Match {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId        Int
  user          User    @relation("Match_User", fields: [userId], references: [id])

  opponentId    Int

  scoreUser     Int
  scoreOpponent Int
  winner        String
  loser         String

  @@map("match")
}
// model MatchHistory {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   winnerId Int
//   winner   User @relation("winner", fields: [winnerId], references: [id])
//   scoreWinner    Int @relation("winner", fields: [scoreWinner], references: [id])

//   scoreLoser     Int @relation("loser", fields: [scoreLoser], references: [id])
//   loserId  Int
//   loser    User @relation("loser", fields: [loserId], references: [id])
  
//   @@map("match_history")
// }
