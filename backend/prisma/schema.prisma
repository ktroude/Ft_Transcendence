// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstname String
  lastname  String
  pseudo    String @unique
  username  String @unique
  picture   String

  wins      Int @default(0)
  losses    Int @default(0)
  rank      Int @default(0)
  level     Int @default(0)

  status    Int @default(0) // 0 = offline, 1 = online, 2 = in game

  userFriends       Friend[] @relation("user")
  friendUserFriends Friend[] @relation("friend_users")

  // mettres toutes ces variables dans la table intermediaire ChatRoomMembers? A voir JSP
  memberOf ChatRoom[] @relation("ChatRoomMembers")
  mutedOf  ChatRoom[] @relation("ChatRoomMuted")
  bannedOf ChatRoom[] @relation("ChatRoomBanned")
  adminOf  ChatRoom[] @relation("ChatRoomAdmin")
  ownerOf  ChatRoom[] @relation("ChatRoomOwned")

  @@map("user") // indique que le nom de la table est "user" plut√¥t que "User"
}

model Friend {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation("user", fields: [user_id], references: [id])
  user_id   Int

  friend    User    @relation("friend_users", fields: [friend_id], references: [id])
  friend_id Int

  @@unique([user_id, friend_id])
  @@map("friend")
}

model ChatRoom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  password String
  private  Boolean
  ownerId  Int
  owner    User    @relation("ChatRoomOwned", fields: [ownerId], references: [id])

  members  User[]    @relation("ChatRoomMembers")
  admin    User[]    @relation("ChatRoomAdmin")
  muted    User[]    @relation("ChatRoomMuted")
  banned   User[]    @relation("ChatRoomBanned")
  messages Message[] @relation("ChatRoomMessages")

  @@map("chat_room")
}

// table intermediaire, permettra de checker qu'un user est dans une room qu'une seule fois 
// (qu'il ne se co pas 50 fois a la meme room, ca peut etre chiant)
model ChatRoomMembers {
  chatRoomId Int
  userId     Int
  createdAt  DateTime @default(now())

  @@id([chatRoomId, userId])
  @@map("chat_room_members")
}

model Message {
  id        Int      @id @default(autoincrement()) //mandatory but useless (on va pas modifier ou supp des messages ds ce projet, c'est pas discord ici)
  createdAt DateTime @default(now())

  content      String
  senderId     Int
  senderPseudo String
  chatRoomId   Int
  chatRoom     ChatRoom @relation("ChatRoomMessages", fields: [chatRoomId], references: [id])

  @@map("message")
}
